var $iEn1Z$cryptojslibtypedarrays = require("crypto-js/lib-typedarrays");
var $iEn1Z$cryptojssha256 = require("crypto-js/sha256");
var $iEn1Z$cryptojsencbase64url = require("crypto-js/enc-base64url");

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$defineInteropFlag(a) {
  Object.defineProperty(a, '__esModule', {value: true, configurable: true});
}
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}

$parcel$defineInteropFlag(module.exports);

$parcel$export(module.exports, "generateChallenge", () => $f5bfd4ce37214f4f$export$6a61b14641fe7480);
$parcel$export(module.exports, "default", () => $f5bfd4ce37214f4f$export$2e2bcd8739ae039);
$parcel$export(module.exports, "verifyChallenge", () => $f5bfd4ce37214f4f$export$4faf58fdf1185e54);



/**
 * Thanks to @SEIAROTg on stackoverflow:
 * "Convert a 32bit integer into 4 bytes of data in javascript"
 * @param num The 32bit integer
 * @returns An ArrayBuffer representing 4 bytes of binary data
 */ function $f5bfd4ce37214f4f$var$toBytesInt32(num) {
    const arr = new ArrayBuffer(4); // an Int32 takes 4 bytes
    const view = new DataView(arr);
    view.setUint32(0, num, false); // byteOffset = 0; litteEndian = false
    return arr;
}
/**
 * Creates an array of length `size` of random bytes
 * @param size
 * @returns Array of random ints (0 to 255)
 */ function $f5bfd4ce37214f4f$var$getRandomValues(size) {
    const randoms = ($parcel$interopDefault($iEn1Z$cryptojslibtypedarrays)).random(size);
    const randoms1byte = [];
    randoms.words.forEach((word)=>{
        const arr = $f5bfd4ce37214f4f$var$toBytesInt32(word);
        const fourByteWord = new Uint8Array(arr);
        for(let i = 0; i < 4; i++)randoms1byte.push(fourByteWord[i]);
    });
    return randoms1byte;
}
/** Generate cryptographically strong random string
 * @param size The desired length of the string
 * @returns The random string
 */ function $f5bfd4ce37214f4f$var$random(size) {
    const mask = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~";
    let result = "";
    const randomUints = $f5bfd4ce37214f4f$var$getRandomValues(size);
    for(let i = 0; i < size; i++){
        // cap the value of the randomIndex to mask.length - 1
        const randomIndex = randomUints[i] % mask.length;
        result += mask[randomIndex];
    }
    return result;
}
/** Generate a PKCE challenge verifier
 * @param length Length of the verifier
 * @returns A random verifier `length` characters long
 */ function $f5bfd4ce37214f4f$var$generateVerifier(length) {
    return $f5bfd4ce37214f4f$var$random(length);
}
function $f5bfd4ce37214f4f$export$6a61b14641fe7480(code_verifier) {
    return ($parcel$interopDefault($iEn1Z$cryptojssha256))(code_verifier).toString(($parcel$interopDefault($iEn1Z$cryptojsencbase64url)));
}
function $f5bfd4ce37214f4f$export$2e2bcd8739ae039(length) {
    if (!length) length = 43;
    if (length < 43 || length > 128) throw `Expected a length between 43 and 128. Received ${length}.`;
    const verifier = $f5bfd4ce37214f4f$var$generateVerifier(length);
    const challenge = $f5bfd4ce37214f4f$export$6a61b14641fe7480(verifier);
    return {
        code_verifier: verifier,
        code_challenge: challenge
    };
}
function $f5bfd4ce37214f4f$export$4faf58fdf1185e54(code_verifier, expectedChallenge) {
    const actualChallenge = $f5bfd4ce37214f4f$export$6a61b14641fe7480(code_verifier);
    return actualChallenge === expectedChallenge;
}


